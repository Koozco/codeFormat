-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Code formater
--   
--   Simple program formating c/cpp code. Pass filename as parameter.
--   Result will be new file named formated + filename.
@package codeFormat
@version 0.1.0.0

module Format

-- | Splits given string by all white characters.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; splitByWhiteChars "The \n\t whit\ne chars in\t this sentence looks\n strange\t."
--   ["The","","","","whit","e","chars","in","","this","sentence","looks","","strange","."]
--   </pre>
splitByWhiteChars :: String -> [String]

-- | Filters empty strings from a list.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; filterEmpty ["The","","","","whit","e","chars","in","","this","sentence","looks","","strange","."]
--   ["The","whit","e","chars","in","this","sentence","looks","strange","."]
--   </pre>
filterEmpty :: [String] -> [String]

-- | Splits strings from a given list by cpp operators [eg. +] and returns
--   splited words lists concatenated.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; splitByOperators ["ala+ma-kota", "cout&lt;&lt;should+it+=work+=like==this?"]
--   ["ala","+","ma","-","kota","cout","&lt;&lt;","should","+","it","+=","work","+=","like","==","this?"]
--   </pre>
splitByOperators :: [String] -> [String]

-- | Adds to each word from list its successors and predecessors and tabs
--   and concatenates all in one string.
--   
--   For example:
--   
--   <pre>
--   &gt;&gt;&gt; printFormated [ "void", "main", "(", ")", "{", "return", "0", ";", "}"] 0 True
--   "\nvoid main( ) {\n\t return 0;\n }\n"
--   </pre>
printFormated :: [String] -> Int -> Bool -> String
